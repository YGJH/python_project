from libnum import *
# from gmpy2 import invert
from Crypto.Util.number import long_to_bytes , GCD
from cytro import *
n = 22977552774356133942951530444993949130215843981040875397572410990346916835381660644707787295705379350096679004237480405708903956708519548492520823061811680096580070476196695688639314427812460671630911367308606020803211947726310322662936556528880489061523198279592942871702977613989356301516921530415513778566963674510600763870131949531135645302009378600342484611593853263563027770894818933177716572384604469745053008750946914828691003286121207990133390676408145893194377906437942395717736536428740108588085452606731376897492941850779936399535517497472929006954159075998456034023415503403024722693566911385210703958867
e = 65537
c = 18066478655731018017654101574971969991871522162201987929047235937042636350498612302540632377795877968120994751174372699516978575658319598337471080555958933126742835955996070793466296174248931137638701201471718044270152879478590100135927436206725412151257894864100738818508306784526951621547201085580997297012884285365742207983607981182426988025457552954709928696953890081100294104254661044255481860081778348051321413060852049511007647714154241620801947208373127231555723817827498342225384313010119778058197531231623065457854616024813802362203789305624277387886764911505325782081396900715391917805959743328187575100119

def egcd(a, b):
    if a==0:
        return (b,0,1)
    else:
        g, x, y = egcd(b % a , a)
        return (g, y-(b//a) * x , x)
def modinv(b, n):
    g, x, _ = egcd(b , n)
    if g==1:
        return x % n
    
x = nroot(n , 2)

def fer(n):
    for a in range(1 , 100000):
        if GCD(x+a , n) != 1:
            return a

a = fer(n)
p = x + a
q = n // p

phi = (p-1) * (q-1)
d = modinv(e , phi)
m = pow(c , d , n)
print(long_to_bytes(m))